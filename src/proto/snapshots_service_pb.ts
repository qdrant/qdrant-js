// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file snapshots_service.proto (package qdrant, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message qdrant.CreateFullSnapshotRequest
 */
export class CreateFullSnapshotRequest extends Message<CreateFullSnapshotRequest> {
  constructor(data?: PartialMessage<CreateFullSnapshotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.CreateFullSnapshotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFullSnapshotRequest {
    return new CreateFullSnapshotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFullSnapshotRequest {
    return new CreateFullSnapshotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFullSnapshotRequest {
    return new CreateFullSnapshotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFullSnapshotRequest | PlainMessage<CreateFullSnapshotRequest> | undefined, b: CreateFullSnapshotRequest | PlainMessage<CreateFullSnapshotRequest> | undefined): boolean {
    return proto3.util.equals(CreateFullSnapshotRequest, a, b);
  }
}

/**
 * @generated from message qdrant.ListFullSnapshotsRequest
 */
export class ListFullSnapshotsRequest extends Message<ListFullSnapshotsRequest> {
  constructor(data?: PartialMessage<ListFullSnapshotsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.ListFullSnapshotsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFullSnapshotsRequest {
    return new ListFullSnapshotsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFullSnapshotsRequest {
    return new ListFullSnapshotsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFullSnapshotsRequest {
    return new ListFullSnapshotsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFullSnapshotsRequest | PlainMessage<ListFullSnapshotsRequest> | undefined, b: ListFullSnapshotsRequest | PlainMessage<ListFullSnapshotsRequest> | undefined): boolean {
    return proto3.util.equals(ListFullSnapshotsRequest, a, b);
  }
}

/**
 * @generated from message qdrant.DeleteFullSnapshotRequest
 */
export class DeleteFullSnapshotRequest extends Message<DeleteFullSnapshotRequest> {
  /**
   * Name of the full snapshot
   *
   * @generated from field: string snapshot_name = 1;
   */
  snapshotName = "";

  constructor(data?: PartialMessage<DeleteFullSnapshotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.DeleteFullSnapshotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFullSnapshotRequest {
    return new DeleteFullSnapshotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFullSnapshotRequest {
    return new DeleteFullSnapshotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFullSnapshotRequest {
    return new DeleteFullSnapshotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFullSnapshotRequest | PlainMessage<DeleteFullSnapshotRequest> | undefined, b: DeleteFullSnapshotRequest | PlainMessage<DeleteFullSnapshotRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFullSnapshotRequest, a, b);
  }
}

/**
 * @generated from message qdrant.CreateSnapshotRequest
 */
export class CreateSnapshotRequest extends Message<CreateSnapshotRequest> {
  /**
   * Name of the collection
   *
   * @generated from field: string collection_name = 1;
   */
  collectionName = "";

  constructor(data?: PartialMessage<CreateSnapshotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.CreateSnapshotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSnapshotRequest {
    return new CreateSnapshotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSnapshotRequest {
    return new CreateSnapshotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSnapshotRequest {
    return new CreateSnapshotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSnapshotRequest | PlainMessage<CreateSnapshotRequest> | undefined, b: CreateSnapshotRequest | PlainMessage<CreateSnapshotRequest> | undefined): boolean {
    return proto3.util.equals(CreateSnapshotRequest, a, b);
  }
}

/**
 * @generated from message qdrant.ListSnapshotsRequest
 */
export class ListSnapshotsRequest extends Message<ListSnapshotsRequest> {
  /**
   * Name of the collection
   *
   * @generated from field: string collection_name = 1;
   */
  collectionName = "";

  constructor(data?: PartialMessage<ListSnapshotsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.ListSnapshotsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSnapshotsRequest {
    return new ListSnapshotsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSnapshotsRequest {
    return new ListSnapshotsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSnapshotsRequest {
    return new ListSnapshotsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSnapshotsRequest | PlainMessage<ListSnapshotsRequest> | undefined, b: ListSnapshotsRequest | PlainMessage<ListSnapshotsRequest> | undefined): boolean {
    return proto3.util.equals(ListSnapshotsRequest, a, b);
  }
}

/**
 * @generated from message qdrant.DeleteSnapshotRequest
 */
export class DeleteSnapshotRequest extends Message<DeleteSnapshotRequest> {
  /**
   * Name of the collection
   *
   * @generated from field: string collection_name = 1;
   */
  collectionName = "";

  /**
   * Name of the collection snapshot
   *
   * @generated from field: string snapshot_name = 2;
   */
  snapshotName = "";

  constructor(data?: PartialMessage<DeleteSnapshotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.DeleteSnapshotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "snapshot_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSnapshotRequest {
    return new DeleteSnapshotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSnapshotRequest {
    return new DeleteSnapshotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSnapshotRequest {
    return new DeleteSnapshotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSnapshotRequest | PlainMessage<DeleteSnapshotRequest> | undefined, b: DeleteSnapshotRequest | PlainMessage<DeleteSnapshotRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSnapshotRequest, a, b);
  }
}

/**
 * @generated from message qdrant.SnapshotDescription
 */
export class SnapshotDescription extends Message<SnapshotDescription> {
  /**
   * Name of the snapshot
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Creation time of the snapshot
   *
   * @generated from field: google.protobuf.Timestamp creation_time = 2;
   */
  creationTime?: Timestamp;

  /**
   * Size of the snapshot in bytes
   *
   * @generated from field: int64 size = 3;
   */
  size = protoInt64.zero;

  constructor(data?: PartialMessage<SnapshotDescription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.SnapshotDescription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "creation_time", kind: "message", T: Timestamp },
    { no: 3, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnapshotDescription {
    return new SnapshotDescription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnapshotDescription {
    return new SnapshotDescription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnapshotDescription {
    return new SnapshotDescription().fromJsonString(jsonString, options);
  }

  static equals(a: SnapshotDescription | PlainMessage<SnapshotDescription> | undefined, b: SnapshotDescription | PlainMessage<SnapshotDescription> | undefined): boolean {
    return proto3.util.equals(SnapshotDescription, a, b);
  }
}

/**
 * @generated from message qdrant.CreateSnapshotResponse
 */
export class CreateSnapshotResponse extends Message<CreateSnapshotResponse> {
  /**
   * @generated from field: qdrant.SnapshotDescription snapshot_description = 1;
   */
  snapshotDescription?: SnapshotDescription;

  /**
   * Time spent to process
   *
   * @generated from field: double time = 2;
   */
  time = 0;

  constructor(data?: PartialMessage<CreateSnapshotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.CreateSnapshotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot_description", kind: "message", T: SnapshotDescription },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSnapshotResponse {
    return new CreateSnapshotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSnapshotResponse {
    return new CreateSnapshotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSnapshotResponse {
    return new CreateSnapshotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSnapshotResponse | PlainMessage<CreateSnapshotResponse> | undefined, b: CreateSnapshotResponse | PlainMessage<CreateSnapshotResponse> | undefined): boolean {
    return proto3.util.equals(CreateSnapshotResponse, a, b);
  }
}

/**
 * @generated from message qdrant.ListSnapshotsResponse
 */
export class ListSnapshotsResponse extends Message<ListSnapshotsResponse> {
  /**
   * @generated from field: repeated qdrant.SnapshotDescription snapshot_descriptions = 1;
   */
  snapshotDescriptions: SnapshotDescription[] = [];

  /**
   * Time spent to process
   *
   * @generated from field: double time = 2;
   */
  time = 0;

  constructor(data?: PartialMessage<ListSnapshotsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.ListSnapshotsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot_descriptions", kind: "message", T: SnapshotDescription, repeated: true },
    { no: 2, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSnapshotsResponse {
    return new ListSnapshotsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSnapshotsResponse {
    return new ListSnapshotsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSnapshotsResponse {
    return new ListSnapshotsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSnapshotsResponse | PlainMessage<ListSnapshotsResponse> | undefined, b: ListSnapshotsResponse | PlainMessage<ListSnapshotsResponse> | undefined): boolean {
    return proto3.util.equals(ListSnapshotsResponse, a, b);
  }
}

/**
 * @generated from message qdrant.DeleteSnapshotResponse
 */
export class DeleteSnapshotResponse extends Message<DeleteSnapshotResponse> {
  /**
   * Time spent to process
   *
   * @generated from field: double time = 1;
   */
  time = 0;

  constructor(data?: PartialMessage<DeleteSnapshotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.DeleteSnapshotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSnapshotResponse {
    return new DeleteSnapshotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSnapshotResponse {
    return new DeleteSnapshotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSnapshotResponse {
    return new DeleteSnapshotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSnapshotResponse | PlainMessage<DeleteSnapshotResponse> | undefined, b: DeleteSnapshotResponse | PlainMessage<DeleteSnapshotResponse> | undefined): boolean {
    return proto3.util.equals(DeleteSnapshotResponse, a, b);
  }
}

