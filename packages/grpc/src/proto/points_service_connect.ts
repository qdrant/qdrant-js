// @generated by protoc-gen-connect-es v0.8.4 with parameter "target=ts"
// @generated from file points_service.proto (package qdrant, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ClearPayloadPoints, CountPoints, CountResponse, CreateFieldIndexCollection, DeleteFieldIndexCollection, DeletePayloadPoints, DeletePoints, GetPoints, GetResponse, PointsOperationResponse, RecommendBatchPoints, RecommendBatchResponse, RecommendPoints, RecommendResponse, ScrollPoints, ScrollResponse, SearchBatchPoints, SearchBatchResponse, SearchPoints, SearchResponse, SetPayloadPoints, UpsertPoints } from "./points_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service qdrant.Points
 */
export const Points = {
  typeName: "qdrant.Points",
  methods: {
    /**
     *
     * Perform insert + updates on points. If point with given ID already exists - it will be overwritten.
     *
     * @generated from rpc qdrant.Points.Upsert
     */
    upsert: {
      name: "Upsert",
      I: UpsertPoints,
      O: PointsOperationResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Delete points
     *
     * @generated from rpc qdrant.Points.Delete
     */
    delete: {
      name: "Delete",
      I: DeletePoints,
      O: PointsOperationResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Retrieve points
     *
     * @generated from rpc qdrant.Points.Get
     */
    get: {
      name: "Get",
      I: GetPoints,
      O: GetResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Set payload for points
     *
     * @generated from rpc qdrant.Points.SetPayload
     */
    setPayload: {
      name: "SetPayload",
      I: SetPayloadPoints,
      O: PointsOperationResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Overwrite payload for points
     *
     * @generated from rpc qdrant.Points.OverwritePayload
     */
    overwritePayload: {
      name: "OverwritePayload",
      I: SetPayloadPoints,
      O: PointsOperationResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Delete specified key payload for points
     *
     * @generated from rpc qdrant.Points.DeletePayload
     */
    deletePayload: {
      name: "DeletePayload",
      I: DeletePayloadPoints,
      O: PointsOperationResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Remove all payload for specified points
     *
     * @generated from rpc qdrant.Points.ClearPayload
     */
    clearPayload: {
      name: "ClearPayload",
      I: ClearPayloadPoints,
      O: PointsOperationResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Create index for field in collection
     *
     * @generated from rpc qdrant.Points.CreateFieldIndex
     */
    createFieldIndex: {
      name: "CreateFieldIndex",
      I: CreateFieldIndexCollection,
      O: PointsOperationResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Delete field index for collection
     *
     * @generated from rpc qdrant.Points.DeleteFieldIndex
     */
    deleteFieldIndex: {
      name: "DeleteFieldIndex",
      I: DeleteFieldIndexCollection,
      O: PointsOperationResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Retrieve closest points based on vector similarity and given filtering conditions
     *
     * @generated from rpc qdrant.Points.Search
     */
    search: {
      name: "Search",
      I: SearchPoints,
      O: SearchResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Retrieve closest points based on vector similarity and given filtering conditions
     *
     * @generated from rpc qdrant.Points.SearchBatch
     */
    searchBatch: {
      name: "SearchBatch",
      I: SearchBatchPoints,
      O: SearchBatchResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Iterate over all or filtered points points
     *
     * @generated from rpc qdrant.Points.Scroll
     */
    scroll: {
      name: "Scroll",
      I: ScrollPoints,
      O: ScrollResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Look for the points which are closer to stored positive examples and at the same time further to negative examples.
     *
     * @generated from rpc qdrant.Points.Recommend
     */
    recommend: {
      name: "Recommend",
      I: RecommendPoints,
      O: RecommendResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Look for the points which are closer to stored positive examples and at the same time further to negative examples.
     *
     * @generated from rpc qdrant.Points.RecommendBatch
     */
    recommendBatch: {
      name: "RecommendBatch",
      I: RecommendBatchPoints,
      O: RecommendBatchResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Count points in collection with given filtering conditions
     *
     * @generated from rpc qdrant.Points.Count
     */
    count: {
      name: "Count",
      I: CountPoints,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

